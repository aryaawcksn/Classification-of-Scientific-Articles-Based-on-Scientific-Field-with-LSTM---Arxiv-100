{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1hvYeoErIGSo38CcCyRyqAaLHDUD33sXG","timestamp":1751346474502}],"gpuType":"T4","authorship_tag":"ABX9TyNDM45zBvbUnjsAThsC/d5B"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# **IMPORT DRIVE**"],"metadata":{"id":"y9L5oZ5CaCkP"}},{"cell_type":"markdown","source":["# Tegar Arya"],"metadata":{"id":"VD6_kd6G25_R"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"asbCTk8441qD","executionInfo":{"status":"ok","timestamp":1752318181008,"user_tz":-420,"elapsed":5894,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"outputId":"bada90c1-fbc0-4cc4-e4b5-1b69c46eaa5e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n","Path root: gdrive/My Drive/Colab Notebooks/Deep Learning Labs/Skripsi lstm/\n"]}],"source":["from google.colab import drive\n","\n","# mounting dataset dari gdrive\n","drive.mount('/content/gdrive', force_remount=True)\n","\n","# lokasi dataset - ubah sesuai dengan lokasi anda mengupload folder datanya\n","root_path = 'gdrive/My Drive/Colab Notebooks/Deep Learning Labs/Skripsi lstm/'\n","\n","# opsional - tampilkan info lokasi dataset\n","print(\"Path root:\", root_path)"]},{"cell_type":"markdown","source":["# **IMPORT LIBRARY**"],"metadata":{"id":"tdy0TgPYaIgE"}},{"cell_type":"code","source":["import pandas as pd # Baca dan proses dataset\n","import numpy as np # Array Operasi Numerik\n","import re # Teks Cleaning\n","from sklearn.model_selection import train_test_split # Bagi data train/test\n","from tensorflow.keras.preprocessing.text import Tokenizer # Mengubah teks menjadi token\n","from tensorflow.keras.preprocessing.sequence import pad_sequences # Menyamakan panjang input LSTM\n","from tensorflow.keras.models import Sequential, load_model # Bangun dan Load Model LSTM\n","from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout # Layer LSTM\n","from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint # Menyimpan model\n","from tensorflow.keras.utils import to_categorical # Ubah label ke one-hot"],"metadata":{"id":"ErbQTi694476"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **LOAD DATASET ( arxiv100 / menggunakan 100ribu dataset 10 label berbahasa inggris )**"],"metadata":{"id":"qtEHl8p-gJPp"}},{"cell_type":"code","source":["dataset_path = root_path + '/arxiv100.csv'  # Sesuaikan dengan nama file\n","df = pd.read_csv(dataset_path)"],"metadata":{"id":"-Dv1XU9M46el"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **DATA VISUALISATION**"],"metadata":{"id":"eLNKk_QMUPtO"}},{"cell_type":"code","source":["# Menampilkan 5 baris pertama dari DataFrame 'df'\n","# Tujuannya untuk melihat struktur data: kolom apa saja, seperti 'title', 'abstract', dan 'label'\n","print(df.head())\n","\n","# Menghitung dan menampilkan jumlah artikel untuk setiap label bidang ilmu (misalnya: 'cs', 'physics', dll)\n","# Ini penting untuk melihat distribusi kelas, apakah seimbang atau tidak\n","print(df['label'].value_counts())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xkbICk-h5eIG","executionInfo":{"status":"ok","timestamp":1752318182249,"user_tz":-420,"elapsed":11,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"outputId":"05040398-4556-4de5-d20f-c0b525db25eb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                                               title  \\\n","0  The Pre-He White Dwarfs in Eclipsing Binaries....   \n","1  A Possible Origin of kHZ QPOs in Low-Mass X-ra...   \n","2  The effects of driving time scales on heating ...   \n","3  A new hard X-ray selected sample of extreme hi...   \n","4  The baryon cycle of Seven Dwarfs with superbub...   \n","\n","                                            abstract     label  \n","0    We report the first $BV$ light curves and hi...  astro-ph  \n","1    A possible origin of kHz QPOs in low-mass X-...  astro-ph  \n","2    Context. The relative importance of AC and D...  astro-ph  \n","3    Extreme high-energy peaked BL Lac objects (E...  astro-ph  \n","4    We present results from a high-resolution, c...  astro-ph  \n","label\n","astro-ph    10000\n","cond-mat    10000\n","cs          10000\n","eess        10000\n","hep-ph      10000\n","hep-th      10000\n","math        10000\n","physics     10000\n","quant-ph    10000\n","stat        10000\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","source":["# Menampilkan daftar nama kolom yang ada dalam DataFrame\n","# Ini berguna untuk memastikan kolom seperti 'title', 'abstract', dan 'label' memang tersedia\n","print(df.columns)\n","\n","# Menampilkan 5 baris pertama dari data\n","# Tujuannya untuk melihat sekilas isi data, format teks, dan nilai awal dari setiap kolom\n","print(df.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xdyo6u8fRWDS","executionInfo":{"status":"ok","timestamp":1752318182250,"user_tz":-420,"elapsed":6,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"outputId":"66e10c95-7ae8-4a80-cb25-aafa16ac575e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['title', 'abstract', 'label'], dtype='object')\n","                                               title  \\\n","0  The Pre-He White Dwarfs in Eclipsing Binaries....   \n","1  A Possible Origin of kHZ QPOs in Low-Mass X-ra...   \n","2  The effects of driving time scales on heating ...   \n","3  A new hard X-ray selected sample of extreme hi...   \n","4  The baryon cycle of Seven Dwarfs with superbub...   \n","\n","                                            abstract     label  \n","0    We report the first $BV$ light curves and hi...  astro-ph  \n","1    A possible origin of kHz QPOs in low-mass X-...  astro-ph  \n","2    Context. The relative importance of AC and D...  astro-ph  \n","3    Extreme high-energy peaked BL Lac objects (E...  astro-ph  \n","4    We present results from a high-resolution, c...  astro-ph  \n"]}]},{"cell_type":"markdown","source":["# Rizqi Darmawan"],"metadata":{"id":"9-HD0liW2jil"}},{"cell_type":"markdown","source":["# **PREPROCESSING**"],"metadata":{"id":"TCIKCxsN5OxD"}},{"cell_type":"code","source":["# Menggabungkan kolom 'title' dan 'abstract' menjadi satu kolom teks bernama 'combined'\n","# - fillna('') digunakan untuk menghindari error jika ada nilai NaN (kosong)\n","# - Spasi (' ') ditambahkan agar kalimat dari title dan abstract tidak menempel langsung\n","df['combined'] = df['title'].fillna('') + ' ' + df['abstract'].fillna('')"],"metadata":{"id":"pEyaDXdLCifO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Fungsi untuk membersihkan teks\n","def clean_text(text):\n","    text = str(text).lower()                     # Ubah semua huruf menjadi lowercase\n","    text = re.sub(r'[^a-zA-Z\\s]', '', text)      # Hapus semua karakter non-huruf (angka, tanda baca, simbol, dll)\n","    return text\n","\n","# Terapkan fungsi clean_text ke setiap nilai pada kolom 'combined'\n","# Tujuannya agar teks bersih sebelum diproses oleh tokenizer\n","df['combined'] = df['combined'].apply(clean_text)\n"],"metadata":{"id":"Kg4WFm035N1C"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **TOKENIZER TEKS**"],"metadata":{"id":"0U9kPquEUGMF"}},{"cell_type":"code","source":["# Ubah semua isi kolom 'combined' menjadi list of string\n","# Mempersiapkan data teks untuk proses tokenisasi\n","texts = df['combined'].astype(str).tolist()\n","\n","# Buat tokenizer untuk mengubah teks menjadi urutan angka (token)\n","# - num_words=5000 → hanya ambil 5000 kata paling sering muncul\n","# - oov_token=\"<OOV>\" → jika ada kata di luar 5000 itu, diganti dengan token khusus <OOV>\n","tokenizer = Tokenizer(num_words=5000, oov_token=\"<OOV>\")\n","\n","# Latih tokenizer pada semua teks yang ada\n","tokenizer.fit_on_texts(texts)\n","\n","# Ubah semua teks menjadi urutan angka/token\n","# Setiap kata diganti dengan indeks dari word_index\n","sequences = tokenizer.texts_to_sequences(texts)\n"],"metadata":{"id":"Jryc4hk75gSw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#tokenizer = Tokenizer(num_words=5000, oov_token=\"<OOV>\")\n","#tokenizer.fit_on_texts(texts)\n","#sequences = tokenizer.texts_to_sequences(texts)\n","#X = pad_sequences(sequences, padding='post', maxlen=100)\n"],"metadata":{"id":"uS_NaMda5j2G"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **PADDING**"],"metadata":{"id":"9KjS2_qcUDMV"}},{"cell_type":"code","source":["# Pad semua sequence agar memiliki panjang yang sama (Disini 200 token)\n","X = pad_sequences(sequences, padding='post', maxlen=200)\n"],"metadata":{"id":"bHw5xqWb5jCq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **ENCODING**"],"metadata":{"id":"QhJoLEM-T1DX"}},{"cell_type":"code","source":["# Import library untuk mengubah label menjadi angka dan one-hot encoding\n","from sklearn.preprocessing import LabelEncoder\n","from tensorflow.keras.utils import to_categorical\n","\n","# Ambil semua label dari kolom 'label' dan diubah jadi list string agar bisa diproses lebih lanjut\n","labels = df['label'].astype(str).tolist()\n","\n","# Inisialisasi encoder\n","label_encoder = LabelEncoder()\n","\n","# Encode label teks menjadi angka\n","encoded_labels = label_encoder.fit_transform(labels)\n","\n","# Ubah label angka menjadi one-hot vector\n","categorical_labels = to_categorical(encoded_labels)\n","\n","# Simpan jumlah kelas (kategori unik)\n","num_classes = len(label_encoder.classes_)\n"],"metadata":{"id":"DHIPmjMb5lYS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Menampilkan semua label unik yang telah ditemukan dan diurutkan oleh LabelEncoder\n","# Mengetahui urutan label dan memastikan encoding-nya sesuai\n","print(\"Label unik:\", label_encoder.classes_)\n","\n","# Menampilkan 5 label pertama setelah diubah dari string menjadi angka\n","# Untuk melihat hasil encoding awal dari label\n","print(\"Label setelah encode:\", encoded_labels[:5])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5JOq-cSIR_qw","executionInfo":{"status":"ok","timestamp":1752318200441,"user_tz":-420,"elapsed":9,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"outputId":"d2fbd2ec-46bf-43db-c719-720c71a444b3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Label unik: ['astro-ph' 'cond-mat' 'cs' 'eess' 'hep-ph' 'hep-th' 'math' 'physics'\n"," 'quant-ph' 'stat']\n","Label setelah encode: [0 0 0 0 0]\n"]}]},{"cell_type":"markdown","source":["# **DATA SPLIT**"],"metadata":{"id":"kryJpkxYT-xB"}},{"cell_type":"code","source":["# Target label y diisi dengan label hasil one-hot encoding\n","y = categorical_labels\n","\n","# Import fungsi untuk membagi dataset\n","from sklearn.model_selection import train_test_split\n","\n","# Membagi dataset menjadi data latih (80%) dan data uji (20%)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"],"metadata":{"id":"CHajEYl55p3k"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Menampilkan bentuk (jumlah baris dan kolom) dari data input (X) dan label (y) untuk data training\n","print(\"X_train shape:\", X_train.shape)  # Misalnya: (80000, 200)\n","print(\"y_train shape:\", y_train.shape)  # Misalnya: (80000, 10)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GrYhsGXpSQi3","executionInfo":{"status":"ok","timestamp":1752318200467,"user_tz":-420,"elapsed":5,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"outputId":"fbcc3922-ec0b-4385-b070-7e6bc356490c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train shape: (80000, 200)\n","y_train shape: (80000, 10)\n"]}]},{"cell_type":"markdown","source":["# **LSTM BASE MODEL**"],"metadata":{"id":"HrXowZNwT6Ym"}},{"cell_type":"code","source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout\n","from tensorflow.keras.regularizers import l2\n","\n","# Sesuaikan dengan tokenisasi & padding sebelumnya\n","vocab_size = len(tokenizer.word_index) + 1\n","max_seq_length = 200  # HARUS sama dengan nilai maxlen pada pad_sequences\n","l2_strength = 0.01    # Bisa kamu ubah ke 0.001 jika terlalu kuat\n","\n","# Bangun model\n","model = Sequential()\n","model.add(Embedding(input_dim=vocab_size, output_dim=64, input_shape=(max_seq_length,)))\n","\n","# Layer LSTM pertama dengan output berurutan\n","model.add(LSTM(64, return_sequences=True))\n","model.add(Dropout(0.3))  # Dropout untuk cegah overfitting\n","\n","# Layer LSTM kedua\n","model.add(LSTM(32))\n","model.add(Dropout(0.3))  # Dropout kedua\n","\n","# Output layer dengan regularisasi L2, Tambahkan penalti ke bobot (weights) yang terlalu besar saat training.\n","model.add(Dense(num_classes, activation='softmax', kernel_regularizer=l2(l2_strength)))\n","\n","# Compile model\n","model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Tampilkan ringkasan model\n","model.summary()\n"],"metadata":{"id":"Zp4Ggzj65sh5","executionInfo":{"status":"ok","timestamp":1752318200610,"user_tz":-420,"elapsed":142,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"colab":{"base_uri":"https://localhost:8080/","height":395},"outputId":"f60e0b3d-3921-4061-d7e6-b67d60550eaf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/embedding.py:93: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(**kwargs)\n"]},{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"sequential_3\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_3\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n","│ embedding_3 (\u001b[38;5;33mEmbedding\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │    \u001b[38;5;34m14,442,560\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ lstm_5 (\u001b[38;5;33mLSTM\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │        \u001b[38;5;34m33,024\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dropout_5 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m200\u001b[0m, \u001b[38;5;34m64\u001b[0m)        │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ lstm_6 (\u001b[38;5;33mLSTM\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │        \u001b[38;5;34m12,416\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dropout_6 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │           \u001b[38;5;34m330\u001b[0m │\n","└─────────────────────────────────┴────────────────────────┴───────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n","│ embedding_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │    <span style=\"color: #00af00; text-decoration-color: #00af00\">14,442,560</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ lstm_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │        <span style=\"color: #00af00; text-decoration-color: #00af00\">33,024</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dropout_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">200</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ lstm_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">12,416</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dropout_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">330</span> │\n","└─────────────────────────────────┴────────────────────────┴───────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m14,488,330\u001b[0m (55.27 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">14,488,330</span> (55.27 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m14,488,330\u001b[0m (55.27 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">14,488,330</span> (55.27 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}}]},{"cell_type":"markdown","source":["# Dani Sulaiman"],"metadata":{"id":"aENg87Ho3Px5"}},{"cell_type":"markdown","source":["# **MODEL TRAINING**"],"metadata":{"id":"Jy9gzqwGUWRK"}},{"cell_type":"code","source":["# Import library untuk menghitung bobot kelas (class weight)\n","from sklearn.utils import class_weight\n","import numpy as np\n","\n","# Menghitung class weight otomatis berdasarkan distribusi label\n","# Gunakan label asli (encoded_labels), bukan one-hot, karena class_weight butuh label berupa angka\n","\n","class_weights = class_weight.compute_class_weight(\n","    class_weight='balanced',                  # Mode penyeimbangan otomatis\n","    classes=np.unique(encoded_labels),        # Daftar label unik\n","    y=encoded_labels                          # Label dalam bentuk angka\n",")\n","\n","# Ubah hasilnya menjadi dictionary → dipakai saat training model\n","class_weights_dict = dict(enumerate(class_weights))\n","\n","# Tampilkan hasil class weight\n","print(class_weights_dict)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Swush8uJv7hv","executionInfo":{"status":"ok","timestamp":1752318200613,"user_tz":-420,"elapsed":12,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"outputId":"fca3c556-22d6-4273-883b-ee839e2fad60"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{0: np.float64(1.0), 1: np.float64(1.0), 2: np.float64(1.0), 3: np.float64(1.0), 4: np.float64(1.0), 5: np.float64(1.0), 6: np.float64(1.0), 7: np.float64(1.0), 8: np.float64(1.0), 9: np.float64(1.0)}\n"]}]},{"cell_type":"code","source":["checkpoint_path = 'gdrive/My Drive/Colab Notebooks/Deep Learning Labs/lstm_text_classification.keras'\n","checkpoint = ModelCheckpoint(\n","    checkpoint_path,\n","    monitor='val_accuracy',       # Pantau akurasi validasi\n","    save_best_only=True,          # Simpan hanya jika hasil terbaik\n","    verbose=1                     # Tampilkan log saat model disimpan\n",")\n","\n","# Hentikan training lebih awal jika akurasi validasi tidak membaik hindari overfitting\n","early_stop = EarlyStopping(\n","    monitor='val_accuracy',\n","    patience=3, # Jika 3 epoch berturut-turut tidak membaik → hentikan\n","    restore_best_weights=True\n",")\n","\n","history = model.fit(\n","    X_train, y_train,\n","    epochs=10,                   # ↓ dari 30 → 10 dulu\n","    batch_size=32,\n","    validation_data=(X_test, y_test),\n","    callbacks=[checkpoint, early_stop], # < Tambahkan Early Stop, menghindari overfitting\n","    class_weight=class_weights_dict\n",")"],"metadata":{"id":"5_dVjWjk5vOX","executionInfo":{"status":"ok","timestamp":1752318974932,"user_tz":-420,"elapsed":768866,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"607f4e65-b7ca-4145-a782-d4e2b4cc3677"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","\u001b[1m2499/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.1781 - loss: 2.1715\n","Epoch 1: val_accuracy improved from -inf to 0.24725, saving model to gdrive/My Drive/Colab Notebooks/Deep Learning Labs/lstm_text_classification.keras\n","\u001b[1m2500/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m65s\u001b[0m 25ms/step - accuracy: 0.1781 - loss: 2.1714 - val_accuracy: 0.2473 - val_loss: 1.7952\n","Epoch 2/10\n","\u001b[1m2499/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.2957 - loss: 1.7221\n","Epoch 2: val_accuracy improved from 0.24725 to 0.42675, saving model to gdrive/My Drive/Colab Notebooks/Deep Learning Labs/lstm_text_classification.keras\n","\u001b[1m2500/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m63s\u001b[0m 25ms/step - accuracy: 0.2957 - loss: 1.7221 - val_accuracy: 0.4268 - val_loss: 1.4334\n","Epoch 3/10\n","\u001b[1m2499/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.4645 - loss: 1.3706\n","Epoch 3: val_accuracy improved from 0.42675 to 0.56265, saving model to gdrive/My Drive/Colab Notebooks/Deep Learning Labs/lstm_text_classification.keras\n","\u001b[1m2500/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 25ms/step - accuracy: 0.4645 - loss: 1.3706 - val_accuracy: 0.5627 - val_loss: 1.1783\n","Epoch 4/10\n","\u001b[1m2498/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.5930 - loss: 1.1501\n","Epoch 4: val_accuracy improved from 0.56265 to 0.66425, saving model to gdrive/My Drive/Colab Notebooks/Deep Learning Labs/lstm_text_classification.keras\n","\u001b[1m2500/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 26ms/step - accuracy: 0.5931 - loss: 1.1500 - val_accuracy: 0.6643 - val_loss: 1.0254\n","Epoch 5/10\n","\u001b[1m2500/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.6950 - loss: 0.9747\n","Epoch 5: val_accuracy improved from 0.66425 to 0.72995, saving model to gdrive/My Drive/Colab Notebooks/Deep Learning Labs/lstm_text_classification.keras\n","\u001b[1m2500/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 25ms/step - accuracy: 0.6950 - loss: 0.9747 - val_accuracy: 0.7300 - val_loss: 0.8889\n","Epoch 6/10\n","\u001b[1m2498/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.7454 - loss: 0.8704\n","Epoch 6: val_accuracy improved from 0.72995 to 0.76385, saving model to gdrive/My Drive/Colab Notebooks/Deep Learning Labs/lstm_text_classification.keras\n","\u001b[1m2500/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m87s\u001b[0m 27ms/step - accuracy: 0.7454 - loss: 0.8704 - val_accuracy: 0.7638 - val_loss: 0.8205\n","Epoch 7/10\n","\u001b[1m2499/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.7793 - loss: 0.7990\n","Epoch 7: val_accuracy improved from 0.76385 to 0.78245, saving model to gdrive/My Drive/Colab Notebooks/Deep Learning Labs/lstm_text_classification.keras\n","\u001b[1m2500/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m64s\u001b[0m 26ms/step - accuracy: 0.7793 - loss: 0.7989 - val_accuracy: 0.7825 - val_loss: 0.7725\n","Epoch 8/10\n","\u001b[1m2498/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.8079 - loss: 0.7410\n","Epoch 8: val_accuracy improved from 0.78245 to 0.79180, saving model to gdrive/My Drive/Colab Notebooks/Deep Learning Labs/lstm_text_classification.keras\n","\u001b[1m2500/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 25ms/step - accuracy: 0.8079 - loss: 0.7410 - val_accuracy: 0.7918 - val_loss: 0.7580\n","Epoch 9/10\n","\u001b[1m2498/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.8236 - loss: 0.7007\n","Epoch 9: val_accuracy improved from 0.79180 to 0.80330, saving model to gdrive/My Drive/Colab Notebooks/Deep Learning Labs/lstm_text_classification.keras\n","\u001b[1m2500/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 25ms/step - accuracy: 0.8236 - loss: 0.7007 - val_accuracy: 0.8033 - val_loss: 0.7299\n","Epoch 10/10\n","\u001b[1m2499/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.8378 - loss: 0.6629\n","Epoch 10: val_accuracy did not improve from 0.80330\n","\u001b[1m2500/2500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 25ms/step - accuracy: 0.8378 - loss: 0.6629 - val_accuracy: 0.8030 - val_loss: 0.7182\n"]}]},{"cell_type":"markdown","source":["# **EVALUATION**"],"metadata":{"id":"RkkfxWInUa_u"}},{"cell_type":"code","source":["# Muat kembali model terbaik yang sebelumnya disimpan menggunakan ModelCheckpoint\n","model = load_model(checkpoint_path)\n","\n","# Evaluasi performa model terhadap data uji (test set)\n","loss, acc = model.evaluate(X_test, y_test)\n","\n","# Tampilkan akurasi akhir pada data uji (dalam format dua angka desimal)\n","print(f'Test Accuracy: {acc:.2f}')"],"metadata":{"id":"CCWv-zO_5xJV","executionInfo":{"status":"ok","timestamp":1752318980461,"user_tz":-420,"elapsed":5527,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"640cdac7-d75d-4f33-e9f3-65fe8490b440"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 7ms/step - accuracy: 0.8034 - loss: 0.7296\n","Test Accuracy: 0.80\n"]}]},{"cell_type":"code","source":["# Tampilkan bentuk/shape dari y_test\n","# Memastikan bahwa jumlah data dan jumlah kelas benar\n","print(\"y_test shape:\", y_test.shape)\n","\n","# Tampilkan 5 data pertama dari y_test\n","# Mengecek bentuk label yang dimiliki model untuk diuji\n","print(\"Contoh y_test:\", y_test[:5])\n","\n","# Tampilkan tipe data y_test\n","# Validasi struktur data\n","print(\"Tipe y_test:\", type(y_test))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eS8NvQaqUO9i","executionInfo":{"status":"ok","timestamp":1752318980474,"user_tz":-420,"elapsed":9,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"outputId":"86cd70ad-9ac7-4b19-c834-e67bbfb2aacd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["y_test shape: (20000, 10)\n","Contoh y_test: [[0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n"," [0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]]\n","Tipe y_test: <class 'numpy.ndarray'>\n"]}]},{"cell_type":"markdown","source":["# **VISUALITION**"],"metadata":{"id":"kHbtR_HUUf-2"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.plot(history.history['accuracy'], label='Train Accuracy')\n","plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.title(\"Akurasi Training vs Validation\")\n","plt.show()"],"metadata":{"id":"G5TzrQlg5zJr","executionInfo":{"status":"ok","timestamp":1752318980631,"user_tz":-420,"elapsed":156,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"colab":{"base_uri":"https://localhost:8080/","height":472},"outputId":"04bb6359-59f4-4b32-c7cb-dcfb5df214bf"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","import numpy as np\n","\n","# Prediksi dari model\n","y_pred = model.predict(X_test)\n","y_pred_classes = np.argmax(y_pred, axis=1)  # ambil label prediksi\n","\n","# Konversi y_test dari one-hot ke label angka\n","y_test_labels = np.argmax(y_test, axis=1)\n","\n","# Tampilkan klasifikasi\n","print(classification_report(y_test_labels, y_pred_classes, target_names=label_encoder.classes_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mc55t9p22M0T","executionInfo":{"status":"ok","timestamp":1752327323516,"user_tz":-420,"elapsed":10413,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"outputId":"3ab824ff-64c4-49d1-d303-8bef410b79fd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 7ms/step\n","              precision    recall  f1-score   support\n","\n","    astro-ph       0.94      0.90      0.92      2005\n","    cond-mat       0.78      0.78      0.78      2013\n","          cs       0.68      0.66      0.67      1977\n","        eess       0.74      0.79      0.77      2038\n","      hep-ph       0.90      0.89      0.90      2002\n","      hep-th       0.88      0.86      0.87      2000\n","        math       0.85      0.83      0.84      1985\n","     physics       0.62      0.65      0.63      2002\n","    quant-ph       0.84      0.88      0.86      1992\n","        stat       0.82      0.79      0.81      1986\n","\n","    accuracy                           0.80     20000\n","   macro avg       0.81      0.80      0.80     20000\n","weighted avg       0.81      0.80      0.80     20000\n","\n"]}]},{"cell_type":"markdown","source":["# Arya Agung"],"metadata":{"id":"sHv3XKn34VbS"}},{"cell_type":"code","source":["# Mapping label, digunakan untuk menjelaskan dengan detail dari label yang ada pada dataset\n","label_nama = {\n","    'astro-ph': 'Astrophysics',\n","    'cond-mat': 'Condensed Matter Physics',\n","    'cs': 'Computer Science',\n","    'eess': 'Electrical Engineering and Systems Science',\n","    'hep-ph': 'High Energy Physics – Phenomenology',\n","    'hep-th': 'High Energy Physics – Theory',\n","    'math': 'Mathematics',\n","    'physics': 'General Physics',\n","    'quant-ph': 'Quantum Physics',\n","    'stat': 'Statistics'\n","}\n"],"metadata":{"id":"K4i35z93RQrc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def predict_label(text):\n","    # Bersihkan teks dari simbol, angka, huruf kapital\n","    cleaned = clean_text(text)\n","\n","    # Ubah teks menjadi urutan token angka\n","    sequence = tokenizer.texts_to_sequences([cleaned])\n","\n","    # Pad urutan agar sesuai panjang yang diharapkan oleh model\n","    padded = pad_sequences(sequence, maxlen=max_seq_length)\n","\n","    # Lakukan prediksi probabilitas terhadap setiap kelas\n","    pred_probs = model.predict(padded)\n","\n","    # Ambil indeks kelas dengan probabilitas tertinggi\n","    pred_class = pred_probs.argmax(axis=1)\n","\n","    # Ubah indeks kelas menjadi label asli (misalnya: 'cs', 'math')\n","    label_code = label_encoder.inverse_transform(pred_class)[0]\n","\n","    # fallback ke label_code jika tak ditemukan\n","    label_full = label_nama.get(label_code, label_code)\n","\n","    # 8. Return label (misalnya 'cs') dan label panjang (jika ada)\n","    return label_code, label_full\n"],"metadata":{"id":"4-tC7h7JX5nE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Melakukan prediksi label berdasarkan input judul dan abstrak artikel\n","def predict_label_from_title_and_abstract(judul, abstrak):\n","    # Gabungkan judul dan abstrak jadi satu string\n","    combined = judul + \" \" + abstrak\n","\n","    # Gunakan fungsi prediksi utama yang sebelumnya di definisikan\n","    return predict_label(combined)\n"],"metadata":{"id":"2m5WNdurPw4T"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Predict Judul 1\n","\n","judul = \"Genetic Mutation Patterns in Cancer Cells\"\n","abstrak = \"This study investigates common gene mutations in malignant cells and their impact on tumor progression and therapy resistance.\"\n","\n","kode, nama = predict_label_from_title_and_abstract(judul, abstrak)\n","print(f'Label prediksi: {kode}')\n","print(f'Bidang Ilmu   : {nama}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rUCdTUE6RWJW","executionInfo":{"status":"ok","timestamp":1752322444157,"user_tz":-420,"elapsed":80,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"outputId":"572850de-2a09-44be-ece9-70196b3bf627"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 35ms/step\n","Label prediksi: math\n","Bidang Ilmu   : Mathematics\n"]}]},{"cell_type":"code","source":["# Predict Judul 2\n","\n","judul = \"Quantum Computing with Superconducting Qubits\"\n","abstrak = \"We demonstrate improved gate fidelity and error correction protocols in superconducting qubit architectures for scalable quantum computing.\"\n","\n","kode, nama = predict_label_from_title_and_abstract(judul, abstrak)\n","print(f'Label prediksi: {kode}')\n","print(f'Bidang Ilmu   : {nama}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TUBASfQBRm_k","executionInfo":{"status":"ok","timestamp":1752318981094,"user_tz":-420,"elapsed":124,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"outputId":"4d4772b0-693e-4221-97b1-302210bc2245"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 52ms/step\n","Label prediksi: quant-ph\n","Bidang Ilmu   : Quantum Physics\n"]}]},{"cell_type":"code","source":["# Predict Judul 3\n","\n","judul = \"Transformer-Based Models for Natural Language Inference\"\n","abstrak = \"We explore the effectiveness of transformer architectures in recognizing textual entailment and contradiction in natural language datasets.\"\n","\n","kode, nama = predict_label_from_title_and_abstract(judul, abstrak)\n","print(f'Label prediksi: {kode}')\n","print(f'Bidang Ilmu   : {nama}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pHCn1XS4RocO","executionInfo":{"status":"ok","timestamp":1752318981240,"user_tz":-420,"elapsed":142,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"outputId":"f83dc2fc-a1ce-40bb-92ce-6de9da0f4eac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 55ms/step\n","Label prediksi: math\n","Bidang Ilmu   : Mathematics\n"]}]},{"cell_type":"code","source":["# Predict Judul 4\n","\n","judul = \"Observational Evidence of Dark Matter in Galaxy Clusters\"\n","abstrak = \"Using gravitational lensing data, we provide measurements supporting the presence of non-luminous mass in galaxy clusters consistent with dark matter models.\"\n","\n","kode, nama = predict_label_from_title_and_abstract(judul, abstrak)\n","print(f'Label prediksi: {kode}')\n","print(f'Bidang Ilmu   : {nama}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NxuckTw_Ruwd","executionInfo":{"status":"ok","timestamp":1752318981367,"user_tz":-420,"elapsed":129,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"outputId":"459c1d1f-b8c4-4866-922c-5cfa41715e51"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 53ms/step\n","Label prediksi: astro-ph\n","Bidang Ilmu   : Astrophysics\n"]}]},{"cell_type":"code","source":["# Predict Judul 5\n","\n","judul = \"Bayesian Inference for Time Series Forecasting\"\n","abstrak = \"This paper proposes a probabilistic model for time series analysis using Bayesian inference and evaluates its performance on financial datasets.\"\n","\n","kode, nama = predict_label_from_title_and_abstract(judul, abstrak)\n","print(f'Label prediksi: {kode}')\n","print(f'Bidang Ilmu   : {nama}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7NpTwzLtRxBB","executionInfo":{"status":"ok","timestamp":1752318981469,"user_tz":-420,"elapsed":101,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"outputId":"9c77b079-66cc-4f6c-f6f5-048ea760ec63"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 48ms/step\n","Label prediksi: math\n","Bidang Ilmu   : Mathematics\n"]}]},{"cell_type":"code","source":["# Predict Judul 6\n","\n","judul = \"Detecting Exoplanets Using Gravitational Microlensing\"\n","abstrak = \"We present observations of microlensing events toward the galactic bulge, confirming the presence of multiple Jupiter-like exoplanets orbiting distant stars.\"\n","kode, nama = predict_label_from_title_and_abstract(judul, abstrak)\n","print(f'Label prediksi: {kode}')\n","print(f'Bidang Ilmu   : {nama}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_f3IG1XKSaxk","executionInfo":{"status":"ok","timestamp":1752318981641,"user_tz":-420,"elapsed":168,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"outputId":"84f4aa43-6907-482a-e236-c45cd126257e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step\n","Label prediksi: astro-ph\n","Bidang Ilmu   : Astrophysics\n"]}]},{"cell_type":"code","source":["# Predict Judul 7\n","\n","judul = \"Superconductivity in Twisted Bilayer Graphene\"\n","abstrak = \"This work explores superconducting properties in twisted bilayer graphene at magic angles, revealing flat band behavior and correlated insulating states.\"\n","kode, nama = predict_label_from_title_and_abstract(judul, abstrak)\n","print(f'Label prediksi: {kode}')\n","print(f'Bidang Ilmu   : {nama}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ArJWrxqqSeYU","executionInfo":{"status":"ok","timestamp":1752321328051,"user_tz":-420,"elapsed":354,"user":{"displayName":"Arya Agung Wicaksono_ 456","userId":"15483253509656300882"}},"outputId":"b547f357-7246-4eb0-b269-b89d6bd60cea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 146ms/step\n","Label prediksi: cond-mat\n","Bidang Ilmu   : Condensed Matter Physics\n"]}]}]}